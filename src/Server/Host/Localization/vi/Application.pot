#: Application\Catalog\Brands\CreateBrandRequest.cs:20
#. .WithMessage((_, name) => T["Brand {0} already Exists.", name]);
msgctxt ".CreateBrandRequestValidator"
msgid "Brand {0} already Exists."
msgstr ""

#: Application\Catalog\Brands\DeleteBrandRequest.cs:29
#. throw new ConflictException(_t["Brand cannot be deleted as it's being used."]);
msgctxt ".DeleteBrandRequestHandler"
msgid "Brand cannot be deleted as it's being used."
msgstr ""

#: Application\Catalog\Brands\DeleteBrandRequest.cs:34
#. _ = brand ?? throw new NotFoundException(_t["Brand {0} Not Found."]);
msgctxt ".DeleteBrandRequestHandler"
msgid "Brand {0} Not Found."
msgstr ""

#: Application\Catalog\Brands\GetBrandRequest.cs:30
#. ?? throw new NotFoundException(_t["Brand {0} Not Found.", request.Id]);
msgctxt ".GetBrandRequestHandler"
msgid "Brand {0} Not Found."
msgstr ""

#: Application\Catalog\Brands\UpdateBrandRequest.cs:24
#. .WithMessage((_, name) => T["Brand {0} already Exists.", name]);
msgctxt ".UpdateBrandRequestValidator"
msgid "Brand {0} already Exists."
msgstr ""

#: Application\Catalog\Brands\UpdateBrandRequest.cs:41
#. ?? throw new NotFoundException(_t["Brand {0} Not Found.", request.Id]);
msgctxt ".UpdateBrandRequestHandler"
msgid "Brand {0} Not Found."
msgstr ""

#: Application\Catalog\Products\CreateProductRequestValidator.cs:15
#. .WithMessage((_, name) => T["Product {0} already Exists.", name]);
msgctxt ".CreateProductRequestValidator"
msgid "Product {0} already Exists."
msgstr ""

#: Application\Catalog\Products\CreateProductRequestValidator.cs:25
#. .WithMessage((_, id) => T["Brand {0} Not Found.", id]);
msgctxt ".CreateProductRequestValidator"
msgid "Brand {0} Not Found."
msgstr ""

#: Application\Catalog\Products\DeleteProductRequest.cs:27
#. _ = product ?? throw new NotFoundException(_t["Product {0} Not Found."]);
msgctxt ".DeleteProductRequestHandler"
msgid "Product {0} Not Found."
msgstr ""

#: Application\Catalog\Products\GetProductRequest.cs:25
#. ?? throw new NotFoundException(_t["Product {0} Not Found.", request.Id]);
msgctxt ".GetProductRequestHandler"
msgid "Product {0} Not Found."
msgstr ""

#: Application\Catalog\Products\GetProductViaDapperRequest.cs:27
#. _ = product ?? throw new NotFoundException(_t["Product {0} Not Found.", request.Id]);
msgctxt ".GetProductViaDapperRequestHandler"
msgid "Product {0} Not Found."
msgstr ""

#: Application\Catalog\Products\UpdateProductRequest.cs:34
#. _ = product ?? throw new NotFoundException(_t["Product {0} Not Found.", request.Id]);
msgctxt ".UpdateProductRequestHandler"
msgid "Product {0} Not Found."
msgstr ""

#: Application\Catalog\Products\UpdateProductRequestValidator.cs:17
#. .WithMessage((_, name) => T["Product {0} already Exists.", name]);
msgctxt ".UpdateProductRequestValidator"
msgid "Product {0} already Exists."
msgstr ""

#: Application\Catalog\Products\UpdateProductRequestValidator.cs:27
#. .WithMessage((_, id) => T["Brand {0} Not Found.", id]);
msgctxt ".UpdateProductRequestValidator"
msgid "Brand {0} Not Found."
msgstr ""

#: Application\Dashboard\GetStatsRequest.cs:56
#. stats.DataEnterBarChart.Add(new ChartSeries { Name = _t["Products"], Data = productsFigure });
msgctxt ".GetStatsRequestHandler"
msgid "Products"
msgstr ""

#: Application\Dashboard\GetStatsRequest.cs:57
#. stats.DataEnterBarChart.Add(new ChartSeries { Name = _t["Brands"], Data = brandsFigure });
msgctxt ".GetStatsRequestHandler"
msgid "Brands"
msgstr ""

#: Application\Identity\Roles\CreateOrUpdateRoleRequest.cs:18
#. .WithMessage(T["Similar Role already exists."]);
msgctxt ".CreateOrUpdateRoleRequestValidator"
msgid "Similar Role already exists."
msgstr ""

#: Application\Identity\Tokens\TokenRequest.cs:18
#. .WithMessage(T["Invalid Email Address."]);
msgctxt ".TokenRequestValidator"
msgid "Invalid Email Address."
msgstr ""

#: Application\Identity\Users\CreateUserRequestValidator.cs:12
#. .WithMessage(T["Invalid Email Address."])
msgctxt ".CreateUserRequestValidator"
msgid "Invalid Email Address."
msgstr ""

#: Application\Identity\Users\CreateUserRequestValidator.cs:14
#. .WithMessage((_, email) => T["Email {0} is already registered.", email]);
msgctxt ".CreateUserRequestValidator"
msgid "Email {0} is already registered."
msgstr ""

#: Application\Identity\Users\CreateUserRequestValidator.cs:20
#. .WithMessage((_, name) => T["Username {0} is already taken.", name]);
msgctxt ".CreateUserRequestValidator"
msgid "Username {0} is already taken."
msgstr ""

#: Application\Identity\Users\CreateUserRequestValidator.cs:24
#. .WithMessage((_, phone) => T["Phone number {0} is already registered.", phone!])
msgctxt ".CreateUserRequestValidator"
msgid "Phone number {0} is already registered."
msgstr ""

#: Application\Identity\Users\Password\ChangePasswordRequest.cs:24
#. .WithMessage(T["Passwords do not match."]);
msgctxt ".ChangePasswordRequestValidator"
msgid "Passwords do not match."
msgstr ""

#: Application\Identity\Users\Password\ForgotPasswordRequest.cs:16
#. .WithMessage(T["Invalid Email Address."]);
msgctxt ".ForgotPasswordRequestValidator"
msgid "Invalid Email Address."
msgstr ""

#: Application\Identity\Users\UpdateUserRequestValidator.cs:23
#. .WithMessage(T["Invalid Email Address."])
msgctxt ".UpdateUserRequestValidator"
msgid "Invalid Email Address."
msgstr ""

#: Application\Identity\Users\UpdateUserRequestValidator.cs:25
#. .WithMessage((_, email) => string.Format(T["Email {0} is already registered."], email));
msgctxt ".UpdateUserRequestValidator"
msgid "Email {0} is already registered."
msgstr ""

#: Application\Identity\Users\UpdateUserRequestValidator.cs:31
#. .WithMessage((_, phone) => string.Format(T["Phone number {0} is already registered."], phone))
msgctxt ".UpdateUserRequestValidator"
msgid "Phone number {0} is already registered."
msgstr ""

#: Application\Multitenancy\CreateTenantRequestValidator.cs:16
#. .WithMessage((_, id) => T["Tenant {0} already exists.", id]);
#: Application\Multitenancy\CreateTenantRequestValidator.cs:21
#. .WithMessage((_, name) => T["Tenant {0} already exists.", name]);
msgctxt ".CreateTenantRequestValidator"
msgid "Tenant {0} already exists."
msgstr ""

#: Application\Multitenancy\CreateTenantRequestValidator.cs:29
#. .WithMessage((_, _) => T["DbProvider must be one of the following: postgresql, mssql, mysql, oracle, sqlite"]);
msgctxt ".CreateTenantRequestValidator"
msgid "DbProvider must be one of the following: postgresql, mssql, mysql, oracle, sqlite"
msgstr ""

#: Application\Multitenancy\CreateTenantRequestValidator.cs:33
#. .WithMessage((_, _) => T["Invalid ConnectionString for the provided DbProvider"]);
msgctxt ".CreateTenantRequestValidator"
msgid "Invalid ConnectionString for the provided DbProvider"
msgstr ""

